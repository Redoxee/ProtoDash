// automatically generated by the FlatBuffers compiler, do not modify

namespace DasherSave
{

using System;
using FlatBuffers;

public sealed class FlatVector2 : Table {
  public static FlatVector2 GetRootAsFlatVector2(ByteBuffer _bb) { return GetRootAsFlatVector2(_bb, new FlatVector2()); }
  public static FlatVector2 GetRootAsFlatVector2(ByteBuffer _bb, FlatVector2 obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public FlatVector2 __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public float X { get { int o = __offset(4); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __offset(6); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }

  public static Offset<FlatVector2> CreateFlatVector2(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f) {
    builder.StartObject(2);
    FlatVector2.AddY(builder, y);
    FlatVector2.AddX(builder, x);
    return FlatVector2.EndFlatVector2(builder);
  }

  public static void StartFlatVector2(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static Offset<FlatVector2> EndFlatVector2(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FlatVector2>(o);
  }
};

public sealed class FlatTracePoint : Table {
  public static FlatTracePoint GetRootAsFlatTracePoint(ByteBuffer _bb) { return GetRootAsFlatTracePoint(_bb, new FlatTracePoint()); }
  public static FlatTracePoint GetRootAsFlatTracePoint(ByteBuffer _bb, FlatTracePoint obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public FlatTracePoint __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int TraceType { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public FlatVector2 Position { get { return GetPosition(new FlatVector2()); } }
  public FlatVector2 GetPosition(FlatVector2 obj) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public float Rotation { get { int o = __offset(8); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }

  public static Offset<FlatTracePoint> CreateFlatTracePoint(FlatBufferBuilder builder,
      int TraceType = 0,
      Offset<FlatVector2> PositionOffset = default(Offset<FlatVector2>),
      float Rotation = 0.0f) {
    builder.StartObject(3);
    FlatTracePoint.AddRotation(builder, Rotation);
    FlatTracePoint.AddPosition(builder, PositionOffset);
    FlatTracePoint.AddTraceType(builder, TraceType);
    return FlatTracePoint.EndFlatTracePoint(builder);
  }

  public static void StartFlatTracePoint(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddTraceType(FlatBufferBuilder builder, int TraceType) { builder.AddInt(0, TraceType, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<FlatVector2> PositionOffset) { builder.AddOffset(1, PositionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, float Rotation) { builder.AddFloat(2, Rotation, 0.0f); }
  public static Offset<FlatTracePoint> EndFlatTracePoint(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FlatTracePoint>(o);
  }
};

public sealed class FlatTraceSave : Table {
  public static FlatTraceSave GetRootAsFlatTraceSave(ByteBuffer _bb) { return GetRootAsFlatTraceSave(_bb, new FlatTraceSave()); }
  public static FlatTraceSave GetRootAsFlatTraceSave(ByteBuffer _bb, FlatTraceSave obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public FlatTraceSave __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string LevelId { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetLevelIdBytes() { return __vector_as_arraysegment(4); }
  public FlatTracePoint GetPoints(int j) { return GetPoints(new FlatTracePoint(), j); }
  public FlatTracePoint GetPoints(FlatTracePoint obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int PointsLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<FlatTraceSave> CreateFlatTraceSave(FlatBufferBuilder builder,
      StringOffset LevelIdOffset = default(StringOffset),
      VectorOffset PointsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    FlatTraceSave.AddPoints(builder, PointsOffset);
    FlatTraceSave.AddLevelId(builder, LevelIdOffset);
    return FlatTraceSave.EndFlatTraceSave(builder);
  }

  public static void StartFlatTraceSave(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddLevelId(FlatBufferBuilder builder, StringOffset LevelIdOffset) { builder.AddOffset(0, LevelIdOffset.Value, 0); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset PointsOffset) { builder.AddOffset(1, PointsOffset.Value, 0); }
  public static VectorOffset CreatePointsVector(FlatBufferBuilder builder, Offset<FlatTracePoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTraceSave> EndFlatTraceSave(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FlatTraceSave>(o);
  }
  public static void FinishFlatTraceSaveBuffer(FlatBufferBuilder builder, Offset<FlatTraceSave> offset) { builder.Finish(offset.Value); }
};


}
